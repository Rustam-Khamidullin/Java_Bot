services:
  postgresql:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: scrapper
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgresql:/var/lib/postgresql/data
    networks:
      - backend

  liquibase-migrations:
    image: liquibase/liquibase:4.25
    depends_on:
      - postgresql
    command:
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgresql:5432/scrapper
      - --username=postgres
      - --password=postgres
      - update
    volumes:
      - ./migrations:/liquibase/changelog
    networks:
      - backend
      
  prometheus:
    image: prom/prometheus
    container_name: "Prometheus"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana-oss
    container_name: "Grafana"
    ports:
      - "3000:3000"
      
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

    volumes:
      - kafka_data:/var/lib/kafka/data

  bot:
    build:
      context: ./bot
      dockerfile: ./bot.Dockerfile
    depends_on:
      - scrapper
    ports:
      - "8090:8090"
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      SCRAPPER_BASE_URL: http://scrapper:8080
    networks:
      - backend

  scrapper:
    build:
      context: ./scrapper
      dockerfile: ./scrapper.Dockerfile
    depends_on:
      - postgresql
    ports:
      - "8080:8080"
    environment:
      POSTGRES_URL: jdbc:postgresql://postgresql:5432/scrapper
      BOT_BASE_URL: http://bot:8090
    networks:
      - backend

volumes:
  postgresql: { }
  kafka_data: { }

networks:
  backend: { }
